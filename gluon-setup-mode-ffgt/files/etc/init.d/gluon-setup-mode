#!/bin/sh /etc/rc.common

START=12


SETUP_MODE_ADDR=203.0.113.1
SETUP_MODE_NETMASK=255.255.255.0

SETUP_MODE_DHCP_RANGE=203.0.113.2,203.0.113.254

for i in /lib/gluon/upgrade/setup-mode/invariant/0* ; do $i ; done

delete_interface() {
	[ "$1" = 'loopback' ] || uci_remove network "$1"
}


check_enable() {
	config_get enabled "$1" enabled
	config_get configured "$1" configured

	if [ "$enabled" = 1 -o "$configured" != 1 ]; then
		export enable=1
	fi
}

setup_network() {
	(
		export UCI_CONFIG_DIR=/var/gluon/setup-mode/config

		mkdir -p "$UCI_CONFIG_DIR"

		FALLBACK_IP=""
		/usr/bin/arping -D -q -I br-wan -c 2 169.254.1.42 && FALLBACK_IP="169.254.1.42"
		if [ "X${FALLBACK_IP}" = "X" ]; then
			/usr/bin/arping -D -q -I br-wan -c 2 169.254.42.1 && FALLBACK_IP="169.254.42.1"
		fi
		if [ "X${FALLBACK_IP}" = "X" ]; then
			/usr/bin/arping -D -q -I br-wan -c 2 169.254.255.42 && FALLBACK_IP="169.254.255.42"
		fi

		cp /etc/config/network "$UCI_CONFIG_DIR"

		config_load network
		config_foreach delete_interface interface

		uci_add network interface setup
		uci_set network setup ifname "${setup_if}"
		uci_set network setup type 'bridge'
		uci_set network setup proto 'dhcp'

		if [ "X${FALLBACK_IP}" != "X" ]; then
			uci_add network interface fallback
			uci_set network fallback ifname "${setup_if}:1"
			uci_set network fallback type 'bridge'
			uci_set network fallback proto 'static'
			uci_set network fallback ipaddr "${FALLBACK_IP}"
			uci_set network fallback netmask "255.155.0.0"
		fi

		if [ $single_only -ne 1 ]; then
			uci_add network interface failsafe
			uci_set network failsafe ifname "${failsafe_if}"
			uci_set network failsafe type 'bridge'
			uci_set network failsafe proto 'static'
			uci_set network failsafe ipaddr "$SETUP_MODE_ADDR"
			uci_set network failsafe netmask "$SETUP_MODE_NETMASK"
	       	fi
		uci_commit network

		SERVICE_DAEMONIZE=1
		SERVICE_WRITE_PID=1
		service_start /sbin/netifd -c "$UCI_CONFIG_DIR"

		setup_switch() { return 0; }

		include /lib/network
		setup_switch
	)
}

start() {
	enable=0
	config_load gluon-setup-mode
	config_foreach check_enable setup_mode

	# Cleanup setup cronjob if previously added
	if [ -e /lib/gluon/cron/notify-setup ]; then
	    /bin/rm /lib/gluon/cron/notify-setup
	fi

	if [ "$enable" = '1' ]; then
		lua -luci -e 'require "luci.model.uci"; uci_state=luci.model.uci.cursor_state(); uci_state:section("gluon-setup-mode", "setup_mode", nil, { running = "1" }); uci_state:save("gluon-setup-mode")'
		uci set 'gluon-setup-mode.@setup_mode[0].enabled=0'
		uci commit gluon-setup-mode

		lan_if="$(lua -e 'print(require("gluon.sysconfig").lan_ifname)')"
		wan_if="$(lua -e 'print(require("gluon.sysconfig").wan_ifname)')"
		setup_if="$(lua -e 'print(require("gluon.sysconfig").setup_ifname)')"

		single_only=0
		if [ "${lan_if}" = "${wan_if}" -o "${lan_if}" = "nil" -o "${wan_if}" = "nil"]; then
		    single_only=1
		fi

		if [ "${setup_if}" = "nil" ]; then
			if [ $single_only -ne 1 ]; then
			    setup_if="${lan_if}"
			    failsafe_if="${wan_if}"
			else
			    setup_if="${wan_if}"
			fi
		else
			if [ $single_only -ne 1 ]; then
			    if [ "${setup_if}" = "${lan_if}" ]; then
				failsafe_if="${wan_if}"
			    else
				failsafe_if="${lan_if}"
			    fi
			fi
		fi

		export failsafe_if
		export setup_if
		export single_only

		setup_network

		(/sbin/udhcpc -p /var/run/udhcpc-setup.pid -s /lib/netifd/dhcp.script -f -t 0 -i br-setup -C &)

		/usr/sbin/telnetd -l /lib/gluon/setup-mode/ash-login
		/etc/init.d/dropbear start

		/usr/sbin/uhttpd -h /lib/gluon/setup-mode/www -x /cgi-bin -A 1 -R -p 0.0.0.0:80

		#/usr/sbin/dnsmasq -p 0 -F $SETUP_MODE_DHCP_RANGE -l /tmp/dhcp.leases -O option:router

		/etc/init.d/led start

		# correctly finish firstboot
		/etc/init.d/done boot

		. /etc/diag.sh
		get_status_led
		status_led_set_timer 1000 300

		# push WiFi environment
		if [ -e /lib/gluon/ffgt-geolocate/senddata.sh ]; then
			/lib/gluon/ffgt-geolocate/senddata.sh
		fi

		# prepare setup.guetersloh.freifunk.net
		if [ -e /lib/gluon/setup-mode/notify-setup.sh ]; then
			/lib/gluon/setup-mode/notify-setup.sh
			# Add setup cronjob in case we couldn't contact setup
			cp -p /lib/gluon/setup-mode/notify-setup.cron /lib/gluon/cron/notify-setup
		fi

		# Run the wizard with the defaults, get that node up
		if [ -e /lib/gluon/setup-mode/auto-wizard.lua ]; then
			sleep 60
			/lib/gluon/setup-mode/auto-wizard.lua
		fi

		# block further boot
		while true; do sleep 1; done
	fi
}
